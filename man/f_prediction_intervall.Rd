% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/f_predict.R
\name{f_prediction_intervall_raw}
\alias{f_prediction_intervall_raw}
\title{calculate raw prediction intervalls}
\usage{
f_prediction_intervall_raw(df, pred_col, obs_col, intervall = 0.95,
  n_neighbours = 500, rm_outliers = T, bootstrap = F, steps = T,
  verbose = T)
}
\arguments{
\item{df}{a dataframe containing predictions and obsvervation pairs}

\item{pred_col}{character vector denoting column with predictions}

\item{obs_col}{character vector denoting column with observed values}

\item{intervall}{double, denoting intervall decision boundary Default: 0.95}

\item{n_neighbours}{integer, denoting the number of neighbouring values to be
considered for the intervall calculation, Default: 500}

\item{rm_outliers}{logical, remove outlier based on boxstats definition,
Default: T}

\item{bootstrap}{logical, if TRUE intervall decision boundary will be
calculated by bootstrapping the population of neighbouring values, if FALSE
a normal distribution will be assumed and decision boundary will be
calculated based on the mean, Default: F}

\item{steps}{logical, if TRUE predictions will be binned instead of
considering the neighbouhood of each point, Default: T}

\item{verbose}{logical}
}
\value{
OUTPUT_DESCRIPTION
}
\description{
uses an empirical approach to calculate prediction intervalls
  for each predicted vs. observed value pair. The calculated raw prediction
  intervalls represent a quite flexible fit which can be used to build a less
  felxible model of the intervalls.
}
\details{
DETAILS
}
\examples{
\dontrun{

m = lm(price ~ carat + depth, ggplot2::diamonds)

df = tibble( obs = ggplot2::diamonds$price
           , pred = predict(m, newdata = ggplot2::diamonds) ) \%>\%
   f_prediction_intervall_raw( 'pred','obs', intervall = 0.975) \%>\%
   f_prediction_intervall_raw( 'pred','obs', intervall = 0.025)

df

ggplot2::ggplot(df) +
  geom_point( aes( x = pred, y = obs), data = dplyr::sample_n(df, 500)
              , alpha = 0.5 ) +
  geom_line( aes(x = pred, y = pred_PI2.5_raw ), size = 1, color = 'darkgreen' ) +
  geom_line( aes(x = pred, y = pred_PI97.5_raw ), size = 1, color = 'darkgreen'  ) +
  geom_line( aes(x = pred, y = pred_mean_raw ), size = 1, color = 'tomato'  )

}
}
\seealso{
\code{\link[plyr]{arrange}}
}
